#!/usr/bin/env node
// @ts-check
/**
 * It is very tedious to enable so many ESLint rules.
 * And eslint:recommended is far from enough.
 * Pregenerate to avoid unknown new rules.
 */
import assert from 'assert'
import eslint from 'eslint'
import { writeFileSync } from 'fs'
import path from 'path'
import { disabledRules, rulesOptions } from './override.js'

const linter = new eslint.Linter()
const rules = linter.getRules()

;(function validateConfigs() {
  for (const name of disabledRules) {
    assert(rules.has(name), `${name} is not a rule name`)
  }
  for (const name of Object.keys(rulesOptions)) {
    assert(
      !disabledRules.has(name),
      `${name} is disabled, should not have options`
    )
    assert(rules.has(name), `${name} is not a rule name`)
  }
})()

// group by type
const genrated = {
  /** @type Record<string, unknown> */
  problem: {},
  /** @type Record<string, unknown> */
  suggestion: {},
}
for (const [name, rule] of rules.entries()) {
  assert(rule.meta && rule.meta.type, `${name} missing rule.metas.type`)
  // Ignore all layout rules
  if (rule.meta.type !== 'layout' && !rule.meta.deprecated) {
    if (disabledRules.has(name)) {
      genrated[rule.meta.type][name] = 0
    } else {
      // use 0 to be distinguished with error
      const option = rulesOptions[name]
      if (option) {
        genrated[rule.meta.type][name] = Array.isArray(option)
          ? ['error', ...option]
          : ['error', option]
      } else {
        genrated[rule.meta.type][name] = 'error'
      }
    }
  }
}

const filename = new URL(import.meta.url).pathname

writeFileSync(
  path.join(path.dirname(filename), '../rules/eslint-generated.cjs'),
  `// This file is generated by ${path.basename(filename)}
// prettier-ignore
module.exports = ${JSON.stringify(
    { ...genrated.problem, ...genrated.suggestion },
    null,
    2
  )}
`
)
